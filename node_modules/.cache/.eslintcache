[{"C:\\Users\\Lenovo\\resume-builder-1\\src\\index.js":"1","C:\\Users\\Lenovo\\resume-builder-1\\src\\App.js":"2","C:\\Users\\Lenovo\\resume-builder-1\\src\\components\\Header\\Header.js":"3","C:\\Users\\Lenovo\\resume-builder-1\\src\\components\\Body\\Body.js":"4","C:\\Users\\Lenovo\\resume-builder-1\\src\\components\\Editor\\Editor.js":"5","C:\\Users\\Lenovo\\resume-builder-1\\src\\components\\Resume\\Resume.js":"6","C:\\Users\\Lenovo\\resume-builder-1\\src\\components\\InputControl\\InputControl.js":"7","C:\\Users\\Lenovo\\Resume-Builder-App\\src\\index.js":"8","C:\\Users\\Lenovo\\Resume-Builder-App\\src\\App.js":"9","C:\\Users\\Lenovo\\Resume-Builder-App\\src\\components\\Header\\Header.js":"10","C:\\Users\\Lenovo\\Resume-Builder-App\\src\\components\\Body\\Body.js":"11","C:\\Users\\Lenovo\\Resume-Builder-App\\src\\components\\Editor\\Editor.js":"12","C:\\Users\\Lenovo\\Resume-Builder-App\\src\\components\\Resume\\Resume.js":"13","C:\\Users\\Lenovo\\Resume-Builder-App\\src\\components\\InputControl\\InputControl.js":"14"},{"size":228,"mtime":1667121824400,"results":"15","hashOfConfig":"16"},{"size":284,"mtime":1667121824377,"results":"17","hashOfConfig":"16"},{"size":610,"mtime":1667121824387,"results":"18","hashOfConfig":"16"},{"size":2847,"mtime":1667121824380,"results":"19","hashOfConfig":"16"},{"size":20998,"mtime":1667121824384,"results":"20","hashOfConfig":"16"},{"size":11399,"mtime":1667121824395,"results":"21","hashOfConfig":"16"},{"size":313,"mtime":1667121824392,"results":"22","hashOfConfig":"16"},{"size":228,"mtime":1667121824400,"results":"23","hashOfConfig":"24"},{"size":292,"mtime":1667124103989,"results":"25","hashOfConfig":"24"},{"size":618,"mtime":1667124072172,"results":"26","hashOfConfig":"24"},{"size":2847,"mtime":1667121824380,"results":"27","hashOfConfig":"24"},{"size":20998,"mtime":1667121824384,"results":"28","hashOfConfig":"24"},{"size":11399,"mtime":1667121824395,"results":"29","hashOfConfig":"24"},{"size":313,"mtime":1667121824392,"results":"30","hashOfConfig":"24"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"7ncaif",{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1jpcf7m",{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Lenovo\\resume-builder-1\\src\\index.js",[],"C:\\Users\\Lenovo\\resume-builder-1\\src\\App.js",[],"C:\\Users\\Lenovo\\resume-builder-1\\src\\components\\Header\\Header.js",[],"C:\\Users\\Lenovo\\resume-builder-1\\src\\components\\Body\\Body.js",[],"C:\\Users\\Lenovo\\resume-builder-1\\src\\components\\Editor\\Editor.js",["63","64","65","66"],"C:\\Users\\Lenovo\\resume-builder-1\\src\\components\\Resume\\Resume.js",["67","68","69","70","71","72"],"C:\\Users\\Lenovo\\resume-builder-1\\src\\components\\InputControl\\InputControl.js",[],"C:\\Users\\Lenovo\\Resume-Builder-App\\src\\index.js",[],"C:\\Users\\Lenovo\\Resume-Builder-App\\src\\App.js",["73"],"import React from \"react\";\r\n\r\nimport Header from \"./components/Header/Header\";\r\nimport Body from \"./components/Body/Body\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      {/* <Header /> */}\r\n      <Body />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Lenovo\\Resume-Builder-App\\src\\components\\Header\\Header.js",["74"],"import React from \"react\";\r\n\r\nimport resumeSvg from \"../../assets/resume.svg\";\r\n\r\nimport styles from \"./Header.module.css\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <div className={styles.container}>\r\n      <div className={styles.left}>\r\n        <p className={styles.heading}>\r\n          A <span>Resume</span> that stands out!\r\n        </p>\r\n        <p className={styles.heading}>\r\n          Make your own resume. <span>It's free</span>\r\n        </p>\r\n      </div>\r\n      {/* <div className={styles.right}>\r\n        <img src={resumeSvg} alt=\"Resume\" />\r\n      </div> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","C:\\Users\\Lenovo\\Resume-Builder-App\\src\\components\\Body\\Body.js",[],"C:\\Users\\Lenovo\\Resume-Builder-App\\src\\components\\Editor\\Editor.js",["75","76","77","78"],"import React, { useEffect, useState } from \"react\";\r\nimport { X } from \"react-feather\";\r\n\r\nimport InputControl from \"../InputControl/InputControl\";\r\n\r\nimport styles from \"./Editor.module.css\";\r\n\r\nfunction Editor(props) {\r\n  const sections = props.sections;\r\n  const information = props.information;\r\n\r\n  const [activeSectionKey, setActiveSectionKey] = useState(\r\n    Object.keys(sections)[0]\r\n  );\r\n  const [activeInformation, setActiveInformation] = useState(\r\n    information[sections[Object.keys(sections)[0]]]\r\n  );\r\n  const [activeDetailIndex, setActiveDetailIndex] = useState(0);\r\n  const [sectionTitle, setSectionTitle] = useState(\r\n    sections[Object.keys(sections)[0]]\r\n  );\r\n  const [values, setValues] = useState({\r\n    name: activeInformation?.detail?.name || \"\",\r\n    title: activeInformation?.detail?.title || \"\",\r\n    linkedin: activeInformation?.detail?.linkedin || \"\",\r\n    github: activeInformation?.detail?.github || \"\",\r\n    phone: activeInformation?.detail?.phone || \"\",\r\n    email: activeInformation?.detail?.email || \"\",\r\n  });\r\n\r\n  const handlePointUpdate = (value, index) => {\r\n    const tempValues = { ...values };\r\n    if (!Array.isArray(tempValues.points)) tempValues.points = [];\r\n    tempValues.points[index] = value;\r\n    setValues(tempValues);\r\n  };\r\n\r\n  const workExpBody = (\r\n    <div className={styles.detail}>\r\n      <div className={styles.row}>\r\n        <InputControl\r\n          label=\"Title\"\r\n          placeholder=\"Enter title eg. Frontend developer\"\r\n          value={values.title}\r\n          onChange={(event) =>\r\n            setValues((prev) => ({ ...prev, title: event.target.value }))\r\n          }\r\n        />\r\n        <InputControl\r\n          label=\"Company Name\"\r\n          placeholder=\"Enter company name eg. amazon\"\r\n          value={values.companyName}\r\n          onChange={(event) =>\r\n            setValues((prev) => ({ ...prev, companyName: event.target.value }))\r\n          }\r\n        />\r\n      </div>\r\n      <div className={styles.row}>\r\n        <InputControl\r\n          label=\"Certificate Link\"\r\n          placeholder=\"Enter certificate link\"\r\n          value={values.certificationLink}\r\n          onChange={(event) =>\r\n            setValues((prev) => ({\r\n              ...prev,\r\n              certificationLink: event.target.value,\r\n            }))\r\n          }\r\n        />\r\n        <InputControl\r\n          label=\"Location\"\r\n          placeholder=\"Enter location eg. Remote\"\r\n          value={values.location}\r\n          onChange={(event) =>\r\n            setValues((prev) => ({ ...prev, location: event.target.value }))\r\n          }\r\n        />\r\n      </div>\r\n      <div className={styles.row}>\r\n        <InputControl\r\n          label=\"Start Date\"\r\n          type=\"date\"\r\n          placeholder=\"Enter start date of work\"\r\n          value={values.startDate}\r\n          onChange={(event) =>\r\n            setValues((prev) => ({ ...prev, startDate: event.target.value }))\r\n          }\r\n        />\r\n        <InputControl\r\n          label=\"End Date\"\r\n          type=\"date\"\r\n          placeholder=\"Enter end date of work\"\r\n          value={values.endDate}\r\n          onChange={(event) =>\r\n            setValues((prev) => ({ ...prev, endDate: event.target.value }))\r\n          }\r\n        />\r\n      </div>\r\n\r\n      <div className={styles.column}>\r\n        <label>Enter work description</label>\r\n        <InputControl\r\n          placeholder=\"Line 1\"\r\n          value={values.points ? values.points[0] : \"\"}\r\n          onChange={(event) => handlePointUpdate(event.target.value, 0)}\r\n        />\r\n        <InputControl\r\n          placeholder=\"Line 2\"\r\n          value={values.points ? values.points[1] : \"\"}\r\n          onChange={(event) => handlePointUpdate(event.target.value, 1)}\r\n        />\r\n        <InputControl\r\n          placeholder=\"Line 3\"\r\n          value={values.points ? values.points[2] : \"\"}\r\n          onChange={(event) => handlePointUpdate(event.target.value, 2)}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n  const projectBody = (\r\n    <div className={styles.detail}>\r\n      <div className={styles.row}>\r\n        <InputControl\r\n          label=\"Title\"\r\n          value={values.title}\r\n          placeholder=\"Enter title eg. Chat app\"\r\n          onChange={(event) =>\r\n            setValues((prev) => ({ ...prev, title: event.target.value }))\r\n          }\r\n        />\r\n      </div>\r\n      <InputControl\r\n        label=\"Overview\"\r\n        value={values.overview}\r\n        placeholder=\"Enter basic overview of project\"\r\n        onChange={(event) =>\r\n          setValues((prev) => ({ ...prev, overview: event.target.value }))\r\n        }\r\n      />\r\n      <div className={styles.row}>\r\n        <InputControl\r\n          label=\"Deployed Link\"\r\n          value={values.link}\r\n          placeholder=\"Enter deployed link of project\"\r\n          onChange={(event) =>\r\n            setValues((prev) => ({ ...prev, link: event.target.value }))\r\n          }\r\n        />\r\n        <InputControl\r\n          label=\"Github Link\"\r\n          value={values.github}\r\n          placeholder=\"Enter github link of project\"\r\n          onChange={(event) =>\r\n            setValues((prev) => ({ ...prev, github: event.target.value }))\r\n          }\r\n        />\r\n      </div>\r\n      <div className={styles.column}>\r\n        <label>Enter project description</label>\r\n        <InputControl\r\n          placeholder=\"Line 1\"\r\n          value={values.points ? values.points[0] : \"\"}\r\n          onChange={(event) => handlePointUpdate(event.target.value, 0)}\r\n        />\r\n        <InputControl\r\n          placeholder=\"Line 2\"\r\n          value={values.points ? values.points[1] : \"\"}\r\n          onChange={(event) => handlePointUpdate(event.target.value, 1)}\r\n        />\r\n        <InputControl\r\n          placeholder=\"Line 3\"\r\n          value={values.points ? values.points[2] : \"\"}\r\n          onChange={(event) => handlePointUpdate(event.target.value, 2)}\r\n        />\r\n        <InputControl\r\n          placeholder=\"Line 4\"\r\n          value={values.points ? values.points[3] : \"\"}\r\n          onChange={(event) => handlePointUpdate(event.target.value, 3)}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n  const educationBody = (\r\n    <div className={styles.detail}>\r\n      <div className={styles.row}>\r\n        <InputControl\r\n          label=\"Title\"\r\n          value={values.title}\r\n          placeholder=\"Enter title eg. B-tech\"\r\n          onChange={(event) =>\r\n            setValues((prev) => ({ ...prev, title: event.target.value }))\r\n          }\r\n        />\r\n      </div>\r\n      <InputControl\r\n        label=\"College/School Name\"\r\n        value={values.college}\r\n        placeholder=\"Enter name of your college/school\"\r\n        onChange={(event) =>\r\n          setValues((prev) => ({ ...prev, college: event.target.value }))\r\n        }\r\n      />\r\n      <div className={styles.row}>\r\n        <InputControl\r\n          label=\"Start Date\"\r\n          type=\"date\"\r\n          placeholder=\"Enter start date of this education\"\r\n          value={values.startDate}\r\n          onChange={(event) =>\r\n            setValues((prev) => ({ ...prev, startDate: event.target.value }))\r\n          }\r\n        />\r\n        <InputControl\r\n          label=\"End Date\"\r\n          type=\"date\"\r\n          placeholder=\"Enter end date of this education\"\r\n          value={values.endDate}\r\n          onChange={(event) =>\r\n            setValues((prev) => ({ ...prev, endDate: event.target.value }))\r\n          }\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n  const basicInfoBody = (\r\n    <div className={styles.detail}>\r\n      <div className={styles.row}>\r\n        <InputControl\r\n          label=\"Name\"\r\n          placeholder=\"Enter your full name eg. Aashu\"\r\n          value={values.name}\r\n          onChange={(event) =>\r\n            setValues((prev) => ({ ...prev, name: event.target.value }))\r\n          }\r\n        />\r\n        <InputControl\r\n          label=\"Title\"\r\n          value={values.title}\r\n          placeholder=\"Enter your title eg. Frontend developer\"\r\n          onChange={(event) =>\r\n            setValues((prev) => ({ ...prev, title: event.target.value }))\r\n          }\r\n        />\r\n      </div>\r\n      <div className={styles.row}>\r\n        <InputControl\r\n          label=\"Linkedin Link\"\r\n          value={values.linkedin}\r\n          placeholder=\"Enter your linkedin profile link\"\r\n          onChange={(event) =>\r\n            setValues((prev) => ({ ...prev, linkedin: event.target.value }))\r\n          }\r\n        />\r\n        <InputControl\r\n          label=\"Github Link\"\r\n          value={values.github}\r\n          placeholder=\"Enter your github profile link\"\r\n          onChange={(event) =>\r\n            setValues((prev) => ({ ...prev, github: event.target.value }))\r\n          }\r\n        />\r\n      </div>\r\n      <div className={styles.row}>\r\n        <InputControl\r\n          label=\"Email\"\r\n          value={values.email}\r\n          placeholder=\"Enter your email\"\r\n          onChange={(event) =>\r\n            setValues((prev) => ({ ...prev, email: event.target.value }))\r\n          }\r\n        />\r\n        <InputControl\r\n          label=\"Enter phone\"\r\n          value={values.phone}\r\n          placeholder=\"Enter your phone number\"\r\n          onChange={(event) =>\r\n            setValues((prev) => ({ ...prev, phone: event.target.value }))\r\n          }\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n  const achievementsBody = (\r\n    <div className={styles.detail}>\r\n      <div className={styles.column}>\r\n        <label>List your achievements</label>\r\n        <InputControl\r\n          placeholder=\"Line 1\"\r\n          value={values.points ? values.points[0] : \"\"}\r\n          onChange={(event) => handlePointUpdate(event.target.value, 0)}\r\n        />\r\n        <InputControl\r\n          placeholder=\"Line 2\"\r\n          value={values.points ? values.points[1] : \"\"}\r\n          onChange={(event) => handlePointUpdate(event.target.value, 1)}\r\n        />\r\n        <InputControl\r\n          placeholder=\"Line 3\"\r\n          value={values.points ? values.points[2] : \"\"}\r\n          onChange={(event) => handlePointUpdate(event.target.value, 2)}\r\n        />\r\n        <InputControl\r\n          placeholder=\"Line 4\"\r\n          value={values.points ? values.points[3] : \"\"}\r\n          onChange={(event) => handlePointUpdate(event.target.value, 3)}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n  const summaryBody = (\r\n    <div className={styles.detail}>\r\n      <InputControl\r\n        label=\"Summary\"\r\n        value={values.summary}\r\n        placeholder=\"Enter your objective/summary\"\r\n        onChange={(event) =>\r\n          setValues((prev) => ({ ...prev, summary: event.target.value }))\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n  const otherBody = (\r\n    <div className={styles.detail}>\r\n      <InputControl\r\n        label=\"Other\"\r\n        value={values.other}\r\n        placeholder=\"Enter something\"\r\n        onChange={(event) =>\r\n          setValues((prev) => ({ ...prev, other: event.target.value }))\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n\r\n  const generateBody = () => {\r\n    switch (sections[activeSectionKey]) {\r\n      case sections.basicInfo:\r\n        return basicInfoBody;\r\n      case sections.workExp:\r\n        return workExpBody;\r\n      case sections.project:\r\n        return projectBody;\r\n      case sections.education:\r\n        return educationBody;\r\n      case sections.achievement:\r\n        return achievementsBody;\r\n      case sections.summary:\r\n        return summaryBody;\r\n      case sections.other:\r\n        return otherBody;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  const handleSubmission = () => {\r\n    switch (sections[activeSectionKey]) {\r\n      case sections.basicInfo: {\r\n        const tempDetail = {\r\n          name: values.name,\r\n          title: values.title,\r\n          linkedin: values.linkedin,\r\n          github: values.github,\r\n          email: values.email,\r\n          phone: values.phone,\r\n        };\r\n\r\n        props.setInformation((prev) => ({\r\n          ...prev,\r\n          [sections.basicInfo]: {\r\n            ...prev[sections.basicInfo],\r\n            detail: tempDetail,\r\n            sectionTitle,\r\n          },\r\n        }));\r\n        break;\r\n      }\r\n      case sections.workExp: {\r\n        const tempDetail = {\r\n          certificationLink: values.certificationLink,\r\n          title: values.title,\r\n          startDate: values.startDate,\r\n          endDate: values.endDate,\r\n          companyName: values.companyName,\r\n          location: values.location,\r\n          points: values.points,\r\n        };\r\n        const tempDetails = [...information[sections.workExp]?.details];\r\n        tempDetails[activeDetailIndex] = tempDetail;\r\n\r\n        props.setInformation((prev) => ({\r\n          ...prev,\r\n          [sections.workExp]: {\r\n            ...prev[sections.workExp],\r\n            details: tempDetails,\r\n            sectionTitle,\r\n          },\r\n        }));\r\n        break;\r\n      }\r\n      case sections.project: {\r\n        const tempDetail = {\r\n          link: values.link,\r\n          title: values.title,\r\n          overview: values.overview,\r\n          github: values.github,\r\n          points: values.points,\r\n        };\r\n        const tempDetails = [...information[sections.project]?.details];\r\n        tempDetails[activeDetailIndex] = tempDetail;\r\n\r\n        props.setInformation((prev) => ({\r\n          ...prev,\r\n          [sections.project]: {\r\n            ...prev[sections.project],\r\n            details: tempDetails,\r\n            sectionTitle,\r\n          },\r\n        }));\r\n        break;\r\n      }\r\n      case sections.education: {\r\n        const tempDetail = {\r\n          title: values.title,\r\n          college: values.college,\r\n          startDate: values.startDate,\r\n          endDate: values.endDate,\r\n        };\r\n        const tempDetails = [...information[sections.education]?.details];\r\n        tempDetails[activeDetailIndex] = tempDetail;\r\n\r\n        props.setInformation((prev) => ({\r\n          ...prev,\r\n          [sections.education]: {\r\n            ...prev[sections.education],\r\n            details: tempDetails,\r\n            sectionTitle,\r\n          },\r\n        }));\r\n        break;\r\n      }\r\n      case sections.achievement: {\r\n        const tempPoints = values.points;\r\n\r\n        props.setInformation((prev) => ({\r\n          ...prev,\r\n          [sections.achievement]: {\r\n            ...prev[sections.achievement],\r\n            points: tempPoints,\r\n            sectionTitle,\r\n          },\r\n        }));\r\n        break;\r\n      }\r\n      case sections.summary: {\r\n        const tempDetail = values.summary;\r\n\r\n        props.setInformation((prev) => ({\r\n          ...prev,\r\n          [sections.summary]: {\r\n            ...prev[sections.summary],\r\n            detail: tempDetail,\r\n            sectionTitle,\r\n          },\r\n        }));\r\n        break;\r\n      }\r\n      case sections.other: {\r\n        const tempDetail = values.other;\r\n\r\n        props.setInformation((prev) => ({\r\n          ...prev,\r\n          [sections.other]: {\r\n            ...prev[sections.other],\r\n            detail: tempDetail,\r\n            sectionTitle,\r\n          },\r\n        }));\r\n        break;\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleAddNew = () => {\r\n    const details = activeInformation?.details;\r\n    if (!details) return;\r\n    const lastDetail = details.slice(-1)[0];\r\n    if (!Object.keys(lastDetail).length) return;\r\n    details?.push({});\r\n\r\n    props.setInformation((prev) => ({\r\n      ...prev,\r\n      [sections[activeSectionKey]]: {\r\n        ...information[sections[activeSectionKey]],\r\n        details: details,\r\n      },\r\n    }));\r\n    setActiveDetailIndex(details?.length - 1);\r\n  };\r\n\r\n  const handleDeleteDetail = (index) => {\r\n    const details = activeInformation?.details\r\n      ? [...activeInformation?.details]\r\n      : \"\";\r\n    if (!details) return;\r\n    details.splice(index, 1);\r\n    props.setInformation((prev) => ({\r\n      ...prev,\r\n      [sections[activeSectionKey]]: {\r\n        ...information[sections[activeSectionKey]],\r\n        details: details,\r\n      },\r\n    }));\r\n\r\n    setActiveDetailIndex((prev) => (prev === index ? 0 : prev - 1));\r\n  };\r\n\r\n  useEffect(() => {\r\n    const activeInfo = information[sections[activeSectionKey]];\r\n    setActiveInformation(activeInfo);\r\n    setSectionTitle(sections[activeSectionKey]);\r\n    setActiveDetailIndex(0);\r\n    setValues({\r\n      name: activeInfo?.detail?.name || \"\",\r\n      overview: activeInfo?.details\r\n        ? activeInfo.details[0]?.overview || \"\"\r\n        : \"\",\r\n      link: activeInfo?.details ? activeInfo.details[0]?.link || \"\" : \"\",\r\n      certificationLink: activeInfo?.details\r\n        ? activeInfo.details[0]?.certificationLink || \"\"\r\n        : \"\",\r\n      companyName: activeInfo?.details\r\n        ? activeInfo.details[0]?.companyName || \"\"\r\n        : \"\",\r\n      college: activeInfo?.details\r\n        ? activeInfo.details[0]?.college || \"\"\r\n        : \"\",\r\n      location: activeInfo?.details\r\n        ? activeInfo.details[0]?.location || \"\"\r\n        : \"\",\r\n      startDate: activeInfo?.details\r\n        ? activeInfo.details[0]?.startDate || \"\"\r\n        : \"\",\r\n      endDate: activeInfo?.details ? activeInfo.details[0]?.endDate || \"\" : \"\",\r\n      points: activeInfo?.details\r\n        ? activeInfo.details[0]?.points\r\n          ? [...activeInfo.details[0]?.points]\r\n          : \"\"\r\n        : activeInfo?.points\r\n        ? [...activeInfo.points]\r\n        : \"\",\r\n      title: activeInfo?.details\r\n        ? activeInfo.details[0]?.title || \"\"\r\n        : activeInfo?.detail?.title || \"\",\r\n      linkedin: activeInfo?.detail?.linkedin || \"\",\r\n      github: activeInfo?.details\r\n        ? activeInfo.details[0]?.github || \"\"\r\n        : activeInfo?.detail?.github || \"\",\r\n      phone: activeInfo?.detail?.phone || \"\",\r\n      email: activeInfo?.detail?.email || \"\",\r\n      summary: typeof activeInfo?.detail !== \"object\" ? activeInfo.detail : \"\",\r\n      other: typeof activeInfo?.detail !== \"object\" ? activeInfo.detail : \"\",\r\n    });\r\n  }, [activeSectionKey]);\r\n\r\n  useEffect(() => {\r\n    setActiveInformation(information[sections[activeSectionKey]]);\r\n  }, [information]);\r\n\r\n  useEffect(() => {\r\n    const details = activeInformation?.details;\r\n    if (!details) return;\r\n\r\n    const activeInfo = information[sections[activeSectionKey]];\r\n    setValues({\r\n      overview: activeInfo.details[activeDetailIndex]?.overview || \"\",\r\n      link: activeInfo.details[activeDetailIndex]?.link || \"\",\r\n      certificationLink:\r\n        activeInfo.details[activeDetailIndex]?.certificationLink || \"\",\r\n      companyName: activeInfo.details[activeDetailIndex]?.companyName || \"\",\r\n      location: activeInfo.details[activeDetailIndex]?.location || \"\",\r\n      startDate: activeInfo.details[activeDetailIndex]?.startDate || \"\",\r\n      endDate: activeInfo.details[activeDetailIndex]?.endDate || \"\",\r\n      points: activeInfo.details[activeDetailIndex]?.points || \"\",\r\n      title: activeInfo.details[activeDetailIndex]?.title || \"\",\r\n      linkedin: activeInfo.details[activeDetailIndex]?.linkedin || \"\",\r\n      github: activeInfo.details[activeDetailIndex]?.github || \"\",\r\n      college: activeInfo.details[activeDetailIndex]?.college || \"\",\r\n    });\r\n  }, [activeDetailIndex]);\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <div className={styles.header}>\r\n        {Object.keys(sections)?.map((key) => (\r\n          <div\r\n            className={`${styles.section} ${\r\n              activeSectionKey === key ? styles.active : \"\"\r\n            }`}\r\n            key={key}\r\n            onClick={() => setActiveSectionKey(key)}\r\n          >\r\n            {sections[key]}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <div className={styles.body}>\r\n        <InputControl\r\n          label=\"Title\"\r\n          placeholder=\"Enter section title\"\r\n          value={sectionTitle}\r\n          onChange={(event) => setSectionTitle(event.target.value)}\r\n        />\r\n\r\n        <div className={styles.chips}>\r\n          {activeInformation?.details\r\n            ? activeInformation?.details?.map((item, index) => (\r\n                <div\r\n                  className={`${styles.chip} ${\r\n                    activeDetailIndex === index ? styles.active : \"\"\r\n                  }`}\r\n                  key={item.title + index}\r\n                  onClick={() => setActiveDetailIndex(index)}\r\n                >\r\n                  <p>\r\n                    {sections[activeSectionKey]} {index + 1}\r\n                  </p>\r\n                  <X\r\n                    onClick={(event) => {\r\n                      event.stopPropagation();\r\n                      handleDeleteDetail(index);\r\n                    }}\r\n                  />\r\n                </div>\r\n              ))\r\n            : \"\"}\r\n          {activeInformation?.details &&\r\n          activeInformation?.details?.length > 0 ? (\r\n            <div className={styles.new} onClick={handleAddNew}>\r\n              +New\r\n            </div>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </div>\r\n\r\n        {generateBody()}\r\n\r\n        <button onClick={handleSubmission}>Save</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Editor;\r\n","C:\\Users\\Lenovo\\Resume-Builder-App\\src\\components\\Resume\\Resume.js",["79","80","81","82","83","84"],"import React, { forwardRef, useEffect, useRef, useState } from \"react\";\r\nimport {\r\n  AtSign,\r\n  Calendar,\r\n  GitHub,\r\n  Linkedin,\r\n  MapPin,\r\n  Paperclip,\r\n  Phone,\r\n} from \"react-feather\";\r\n\r\nimport styles from \"./Resume.module.css\";\r\n\r\nconst Resume = forwardRef((props, ref) => {\r\n  const information = props.information;\r\n  const sections = props.sections;\r\n  const containerRef = useRef();\r\n\r\n  const [columns, setColumns] = useState([[], []]);\r\n  const [source, setSource] = useState(\"\");\r\n  const [target, seTarget] = useState(\"\");\r\n\r\n  const info = {\r\n    workExp: information[sections.workExp],\r\n    project: information[sections.project],\r\n    achievement: information[sections.achievement],\r\n    education: information[sections.education],\r\n    basicInfo: information[sections.basicInfo],\r\n    summary: information[sections.summary],\r\n    other: information[sections.other],\r\n  };\r\n\r\n  const getFormattedDate = (value) => {\r\n    if (!value) return \"\";\r\n    const date = new Date(value);\r\n\r\n    return `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`;\r\n  };\r\n\r\n  const sectionDiv = {\r\n    [sections.workExp]: (\r\n      <div\r\n        key={\"workexp\"}\r\n        draggable\r\n        onDragOver={() => seTarget(info.workExp?.id)}\r\n        onDragEnd={() => setSource(info.workExp?.id)}\r\n        className={`${styles.section} ${\r\n          info.workExp?.sectionTitle ? \"\" : styles.hidden\r\n        }`}\r\n      >\r\n        <div className={styles.sectionTitle}>{info.workExp.sectionTitle}</div>\r\n        <div className={styles.content}>\r\n          {info.workExp?.details?.map((item) => (\r\n            <div className={styles.item} key={item.title}>\r\n              {item.title ? (\r\n                <p className={styles.title}>{item.title}</p>\r\n              ) : (\r\n                <span />\r\n              )}\r\n              {item.companyName ? (\r\n                <p className={styles.subTitle}>{item.companyName}</p>\r\n              ) : (\r\n                <span />\r\n              )}\r\n              {item.certificationLink ? (\r\n                <a className={styles.link} href={item.certificationLink}>\r\n                  <Paperclip />\r\n                  {item.certificationLink}\r\n                </a>\r\n              ) : (\r\n                <span />\r\n              )}\r\n              {item.startDate && item.endDate ? (\r\n                <div className={styles.date}>\r\n                  <Calendar /> {getFormattedDate(item.startDate)}-\r\n                  {getFormattedDate(item.endDate)}\r\n                </div>\r\n              ) : (\r\n                <div />\r\n              )}\r\n              {item.location ? (\r\n                <p className={styles.date}>\r\n                  <MapPin /> Remote\r\n                </p>\r\n              ) : (\r\n                <span />\r\n              )}\r\n              {item.points?.length > 0 ? (\r\n                <ul className={styles.points}>\r\n                  {item.points?.map((elem, index) => (\r\n                    <li className={styles.point} key={elem + index}>\r\n                      {elem}\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              ) : (\r\n                <span />\r\n              )}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    ),\r\n    [sections.project]: (\r\n      <div\r\n        key={\"project\"}\r\n        draggable\r\n        onDragOver={() => seTarget(info.project?.id)}\r\n        onDragEnd={() => setSource(info.project?.id)}\r\n        className={`${styles.section} ${\r\n          info.project?.sectionTitle ? \"\" : styles.hidden\r\n        }`}\r\n      >\r\n        <div className={styles.sectionTitle}>{info.project.sectionTitle}</div>\r\n        <div className={styles.content}>\r\n          {info.project?.details?.map((item) => (\r\n            <div className={styles.item}>\r\n              {item.title ? (\r\n                <p className={styles.title}>{item.title}</p>\r\n              ) : (\r\n                <span />\r\n              )}\r\n              {item.link ? (\r\n                <a className={styles.link} href={item.link}>\r\n                  <Paperclip />\r\n                  {item.link}\r\n                </a>\r\n              ) : (\r\n                <span />\r\n              )}\r\n              {item.github ? (\r\n                <a className={styles.link} href={item.github}>\r\n                  <GitHub />\r\n                  {item.github}\r\n                </a>\r\n              ) : (\r\n                <span />\r\n              )}\r\n              {item.overview ? (\r\n                <p className={styles.overview}>{item.overview} </p>\r\n              ) : (\r\n                <span />\r\n              )}\r\n              {item.points?.length > 0 ? (\r\n                <ul className={styles.points}>\r\n                  {item.points?.map((elem, index) => (\r\n                    <li className={styles.point} key={elem + index}>\r\n                      {elem}\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              ) : (\r\n                <span />\r\n              )}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    ),\r\n    [sections.education]: (\r\n      <div\r\n        key={\"education\"}\r\n        draggable\r\n        onDragOver={() => seTarget(info.education?.id)}\r\n        onDragEnd={() => setSource(info.education?.id)}\r\n        className={`${styles.section} ${\r\n          info.education?.sectionTitle ? \"\" : styles.hidden\r\n        }`}\r\n      >\r\n        <div className={styles.sectionTitle}>\r\n          {info.education?.sectionTitle}\r\n        </div>\r\n        <div className={styles.content}>\r\n          {info.education?.details?.map((item) => (\r\n            <div className={styles.item}>\r\n              {item.title ? (\r\n                <p className={styles.title}>{item.title}</p>\r\n              ) : (\r\n                <span />\r\n              )}\r\n              {item.college ? (\r\n                <p className={styles.subTitle}>Some college name</p>\r\n              ) : (\r\n                <span />\r\n              )}\r\n              {item.startDate && item.endDate ? (\r\n                <div className={styles.date}>\r\n                  <Calendar /> {getFormattedDate(item.startDate)} -\r\n                  {getFormattedDate(item.endDate)}\r\n                </div>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    ),\r\n    [sections.achievement]: (\r\n      <div\r\n        key={\"achievement\"}\r\n        draggable\r\n        onDragOver={() => seTarget(info.achievement?.id)}\r\n        onDragEnd={() => setSource(info.achievement?.id)}\r\n        className={`${styles.section} ${\r\n          info.achievement?.sectionTitle ? \"\" : styles.hidden\r\n        }`}\r\n      >\r\n        <div className={styles.sectionTitle}>\r\n          {info.achievement?.sectionTitle}\r\n        </div>\r\n        <div className={styles.content}>\r\n          {info.achievement?.points?.length > 0 ? (\r\n            <ul className={styles.numbered}>\r\n              {info.achievement?.points?.map((elem, index) => (\r\n                <li className={styles.point} key={elem + index}>\r\n                  {elem}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          ) : (\r\n            <span />\r\n          )}\r\n        </div>\r\n      </div>\r\n    ),\r\n    [sections.summary]: (\r\n      <div\r\n        key={\"summary\"}\r\n        draggable\r\n        onDragOver={() => seTarget(info.summary?.id)}\r\n        onDragEnd={() => setSource(info.summary?.id)}\r\n        className={`${styles.section} ${\r\n          info.summary?.sectionTitle ? \"\" : styles.hidden\r\n        }`}\r\n      >\r\n        <div className={styles.sectionTitle}>{info.summary?.sectionTitle}</div>\r\n        <div className={styles.content}>\r\n          <p className={styles.overview}>{info.summary?.detail}</p>\r\n        </div>\r\n      </div>\r\n    ),\r\n    [sections.other]: (\r\n      <div\r\n        key={\"other\"}\r\n        draggable\r\n        onDragOver={() => seTarget(info.other?.id)}\r\n        onDragEnd={() => setSource(info.other?.id)}\r\n        className={`${styles.section} ${\r\n          info.other?.sectionTitle ? \"\" : styles.hidden\r\n        }`}\r\n      >\r\n        <div className={styles.sectionTitle}>{info.other?.sectionTitle}</div>\r\n        <div className={styles.content}>\r\n          <p className={styles.overview}>{info?.other?.detail}</p>\r\n        </div>\r\n      </div>\r\n    ),\r\n  };\r\n\r\n  const swapSourceTarget = (source, target) => {\r\n    if (!source || !target) return;\r\n    const tempColumns = [[...columns[0]], [...columns[1]]];\r\n\r\n    let sourceRowIndex = tempColumns[0].findIndex((item) => item === source);\r\n    let sourceColumnIndex = 0;\r\n    if (sourceRowIndex < 0) {\r\n      sourceColumnIndex = 1;\r\n      sourceRowIndex = tempColumns[1].findIndex((item) => item === source);\r\n    }\r\n\r\n    let targetRowIndex = tempColumns[0].findIndex((item) => item === target);\r\n    let targetColumnIndex = 0;\r\n    if (targetRowIndex < 0) {\r\n      targetColumnIndex = 1;\r\n      targetRowIndex = tempColumns[1].findIndex((item) => item === target);\r\n    }\r\n\r\n    const tempSource = tempColumns[sourceColumnIndex][sourceRowIndex];\r\n    tempColumns[sourceColumnIndex][sourceRowIndex] =\r\n      tempColumns[targetColumnIndex][targetRowIndex];\r\n\r\n    tempColumns[targetColumnIndex][targetRowIndex] = tempSource;\r\n\r\n    setColumns(tempColumns);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setColumns([\r\n      [sections.project, sections.education, sections.summary],\r\n      [sections.workExp, sections.achievement, sections.other],\r\n    ]);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    swapSourceTarget(source, target);\r\n  }, [source]);\r\n\r\n  useEffect(() => {\r\n    const container = containerRef.current;\r\n    if (!props.activeColor || !container) return;\r\n\r\n    container.style.setProperty(\"--color\", props.activeColor);\r\n  }, [props.activeColor]);\r\n\r\n  return (\r\n    <div ref={ref}>\r\n      <div ref={containerRef} className={styles.container}>\r\n        <div className={styles.header}>\r\n          <p className={styles.heading}>{info.basicInfo?.detail?.name}</p>\r\n          <p className={styles.subHeading}>{info.basicInfo?.detail?.title}</p>\r\n\r\n          <div className={styles.links}>\r\n            {info.basicInfo?.detail?.email ? (\r\n              <a className={styles.link} type=\"email\">\r\n                <AtSign /> {info.basicInfo?.detail?.email}\r\n              </a>\r\n            ) : (\r\n              <span />\r\n            )}\r\n            {info.basicInfo?.detail?.phone ? (\r\n              <a className={styles.link}>\r\n                <Phone /> {info.basicInfo?.detail?.phone}\r\n              </a>\r\n            ) : (\r\n              <span />\r\n            )}\r\n            {info.basicInfo?.detail?.linkedin ? (\r\n              <a className={styles.link}>\r\n                <Linkedin /> {info.basicInfo?.detail?.linkedin}\r\n              </a>\r\n            ) : (\r\n              <span />\r\n            )}\r\n            {info.basicInfo?.detail?.github ? (\r\n              <a className={styles.link}>\r\n                <GitHub /> {info.basicInfo?.detail?.github}\r\n              </a>\r\n            ) : (\r\n              <span />\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        <div className={styles.main}>\r\n          <div className={styles.col1}>\r\n            {columns[0].map((item) => sectionDiv[item])}\r\n          </div>\r\n          <div className={styles.col2}>\r\n            {columns[1].map((item) => sectionDiv[item])}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Resume;\r\n","C:\\Users\\Lenovo\\Resume-Builder-App\\src\\components\\InputControl\\InputControl.js",[],{"ruleId":"85","severity":1,"message":"86","line":357,"column":5,"nodeType":"87","messageId":"88","endLine":481,"endColumn":6},{"ruleId":"89","severity":1,"message":"90","line":564,"column":6,"nodeType":"91","endLine":564,"endColumn":24,"suggestions":"92"},{"ruleId":"89","severity":1,"message":"93","line":568,"column":6,"nodeType":"91","endLine":568,"endColumn":19,"suggestions":"94"},{"ruleId":"89","severity":1,"message":"95","line":590,"column":6,"nodeType":"91","endLine":590,"endColumn":25,"suggestions":"96"},{"ruleId":"89","severity":1,"message":"97","line":293,"column":6,"nodeType":"91","endLine":293,"endColumn":8,"suggestions":"98"},{"ruleId":"89","severity":1,"message":"99","line":297,"column":6,"nodeType":"91","endLine":297,"endColumn":14,"suggestions":"100"},{"ruleId":"101","severity":1,"message":"102","line":315,"column":15,"nodeType":"103","endLine":315,"endColumn":55},{"ruleId":"101","severity":1,"message":"102","line":322,"column":15,"nodeType":"103","endLine":322,"endColumn":42},{"ruleId":"101","severity":1,"message":"102","line":329,"column":15,"nodeType":"103","endLine":329,"endColumn":42},{"ruleId":"101","severity":1,"message":"102","line":336,"column":15,"nodeType":"103","endLine":336,"endColumn":42},{"ruleId":"104","severity":1,"message":"105","line":3,"column":8,"nodeType":"106","messageId":"107","endLine":3,"endColumn":14},{"ruleId":"104","severity":1,"message":"108","line":3,"column":8,"nodeType":"106","messageId":"107","endLine":3,"endColumn":17},{"ruleId":"85","severity":1,"message":"86","line":357,"column":5,"nodeType":"87","messageId":"88","endLine":481,"endColumn":6},{"ruleId":"89","severity":1,"message":"90","line":564,"column":6,"nodeType":"91","endLine":564,"endColumn":24,"suggestions":"109"},{"ruleId":"89","severity":1,"message":"93","line":568,"column":6,"nodeType":"91","endLine":568,"endColumn":19,"suggestions":"110"},{"ruleId":"89","severity":1,"message":"95","line":590,"column":6,"nodeType":"91","endLine":590,"endColumn":25,"suggestions":"111"},{"ruleId":"89","severity":1,"message":"97","line":293,"column":6,"nodeType":"91","endLine":293,"endColumn":8,"suggestions":"112"},{"ruleId":"89","severity":1,"message":"99","line":297,"column":6,"nodeType":"91","endLine":297,"endColumn":14,"suggestions":"113"},{"ruleId":"101","severity":1,"message":"102","line":315,"column":15,"nodeType":"103","endLine":315,"endColumn":55},{"ruleId":"101","severity":1,"message":"102","line":322,"column":15,"nodeType":"103","endLine":322,"endColumn":42},{"ruleId":"101","severity":1,"message":"102","line":329,"column":15,"nodeType":"103","endLine":329,"endColumn":42},{"ruleId":"101","severity":1,"message":"102","line":336,"column":15,"nodeType":"103","endLine":336,"endColumn":42},"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'information' and 'sections'. Either include them or remove the dependency array.","ArrayExpression",["114"],"React Hook useEffect has missing dependencies: 'activeSectionKey' and 'sections'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setActiveInformation' needs the current value of 'activeSectionKey'.",["115"],"React Hook useEffect has missing dependencies: 'activeInformation?.details', 'activeSectionKey', 'information', and 'sections'. Either include them or remove the dependency array.",["116"],"React Hook useEffect has missing dependencies: 'sections.achievement', 'sections.education', 'sections.other', 'sections.project', 'sections.summary', and 'sections.workExp'. Either include them or remove the dependency array.",["117"],"React Hook useEffect has missing dependencies: 'swapSourceTarget' and 'target'. Either include them or remove the dependency array.",["118"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'Header' is defined but never used.","Identifier","unusedVar","'resumeSvg' is defined but never used.",["119"],["120"],["121"],["122"],["123"],{"desc":"124","fix":"125"},{"desc":"124","fix":"126"},{"desc":"127","fix":"128"},{"desc":"129","fix":"130"},{"desc":"131","fix":"132"},{"desc":"124","fix":"133"},{"desc":"124","fix":"134"},{"desc":"127","fix":"135"},{"desc":"129","fix":"136"},{"desc":"131","fix":"137"},"Update the dependencies array to be: [activeSectionKey, information, sections]",{"range":"138","text":"139"},{"range":"140","text":"139"},"Update the dependencies array to be: [activeDetailIndex, activeInformation?.details, activeSectionKey, information, sections]",{"range":"141","text":"142"},"Update the dependencies array to be: [sections.achievement, sections.education, sections.other, sections.project, sections.summary, sections.workExp]",{"range":"143","text":"144"},"Update the dependencies array to be: [source, swapSourceTarget, target]",{"range":"145","text":"146"},{"range":"147","text":"139"},{"range":"148","text":"139"},{"range":"149","text":"142"},{"range":"150","text":"144"},{"range":"151","text":"146"},[17851,17869],"[activeSectionKey, information, sections]",[17969,17982],[19056,19075],"[activeDetailIndex, activeInformation?.details, activeSectionKey, information, sections]",[9434,9436],"[sections.achievement, sections.education, sections.other, sections.project, sections.summary, sections.workExp]",[9507,9515],"[source, swapSourceTarget, target]",[17851,17869],[17969,17982],[19056,19075],[9434,9436],[9507,9515]]